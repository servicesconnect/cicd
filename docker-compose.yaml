# docker compose up -d redis mongodb mysql postgres rabbitmq elasticsearch kibana
services:
  redis:
    container_name: redis
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --loglevel warning
    volumes:
      - redis-data:/data
    networks:
      - servicesconnect

  mongodb:
    container_name: mongodb
    image: mongo
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db
    networks:
      - servicesconnect

  mysql:
    container_name: mysql
    image: mysql
    restart: always
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    env_file:
      - .env
    networks:
      - servicesconnect

  postgres:
    container_name: postgres
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - servicesconnect

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.13-rc-management-alpine
    restart: always
    ports:
      # AMQP protocol port
      - "5672:5672"
      # Management UI
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/
    env_file:
      - .env
    networks:
      - servicesconnect

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - "8080:80"
    env_file:
      - .env
    networks:
      - servicesconnect

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: "true"
      discovery.type: single-node
      network.host: 0.0.0.0
      transport.host: 127.0.0.1
      http.host: 0.0.0.0
      xpack.security.enabled: "true"
      xpack.security.authc.api_key.enabled: "true"
      xpack.monitoring.collection.enabled: "true"
      xpack.security.enrollment.enabled: "true"
      xpack.security.authc.token.enabled: "true"
      ELASTIC_PASSWORD: admin1234
    ports:
      - 9300:9300
      - 9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elastic
      - servicesconnect

  metricbeat:
    container_name: metricbeat
    image: docker.elastic.co/beats/metricbeat:8.11.0
    user: root
    ports:
      - 5066:5066
    networks:
      - elastic
      - servicesconnect
    volumes:
      - ./metricbeat/metricbeat.yml/:/usr/share/metricbeat/metricbeat.yml:ro
      # docker module
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # system module
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    command: ["--strict.perms=false", "-system.hostfs=/hostfs"]
    depends_on:
      - elasticsearch

  heartbeat:
    container_name: heartbeat
    image: docker.elastic.co/beats/heartbeat:8.11.0
    user: root
    hostname: heartbeat
    cap_add:
      - NET_RAW
    networks:
      - elastic
      - servicesconnect
    command: ["--strict.perms=false"]
    volumes:
      - ./heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro
    depends_on:
      - elasticsearch

  apmserver:
    image: docker.elastic.co/apm/apm-server:8.11.0
    container_name: apmserver
    ports:
      - 8200:8200
    volumes:
      - ./apm-server/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
    networks:
      - elastic
      - servicesconnect
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E setup.kibana.host=kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana:5601
        -E apm-server.kibana.protocol=http
        -E strict.perms=false
        -E apm-server.auth.anonymous.enabled=true

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.11.0
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana
      - ELASTICSEARCH_SERVICEACCOUNT_TOKEN=A
      - XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]
    ports:
      - 5601:5601
    networks:
      - elastic
      - servicesconnect
    volumes:
      - ./kibana/kibana.yml/:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch

  notifications:
    build:
      context: ../notifications
      dockerfile: Dockerfile.dev
    ports:
      - "5001:5000"
    env_file: ../notifications/.env
    depends_on:
      - rabbitmq
    restart: always
    container_name: notifications
    networks:
      - servicesconnect

  gateway:
    build:
      context: ../gateway
      dockerfile: Dockerfile.dev
    ports:
      - "5000:5000"
    env_file: ../gateway/.env
    restart: always
    container_name: gateway
    networks:
      - servicesconnect

  auth:
    build:
      context: ../auth
      dockerfile: Dockerfile.dev
    ports:
      - "5002:5000"
    env_file: ../auth/.env
    restart: always
    container_name: auth
    networks:
      - servicesconnect
    depends_on:
      - mysql
      - rabbitmq

  users:
    build:
      context: ../users
      dockerfile: Dockerfile.dev
    ports:
      - "5003:5000"

    env_file: ../users/.env
    restart: always
    container_name: users
    networks:
      - servicesconnect
    depends_on:
      - mysql
      - rabbitmq

  project:
    build:
      context: ../project
      dockerfile: Dockerfile.dev
    ports:
      - "5004:5000"

    env_file: ../project/.env
    restart: always
    container_name: project
    networks:
      - servicesconnect
    depends_on:
      - mysql
      - rabbitmq

  order:
    build:
      context: ../order
      dockerfile: Dockerfile.dev
    ports:
      - "5005:5000"

    env_file: ../order/.env
    restart: always
    container_name: order
    networks:
      - servicesconnect
    depends_on:
      - mysql
      - rabbitmq
  review:
    build:
      context: ../review
      dockerfile: Dockerfile.dev
    ports:
      - "5006:5000"

    env_file: ../review/.env
    restart: always
    container_name: review
    networks:
      - servicesconnect
    depends_on:
      - mysql
      - rabbitmq

volumes:
  redis-data:
  mongo-data:
  postgres-data:
  mysql-data:
  elasticsearch-data:
  rabbitmq-data:

networks:
  elastic:
    name: elastic
  servicesconnect:
    name: servicesconnect
